
#Использовать "../internal/localization"
#Использовать "../../../internal/utils"

#Использовать 1commands
#Использовать asserts
#Использовать fs

Перем КаталогEDT;
Перем ПредметОтладки;
Перем URLОтладки;

Перем ЛокализованныеСтроки;
Перем ТаймаутОжидания;

#Область ПрограммныйИнтерфейс

// Устанавливает каталог расположения EDT
//
// Параметры:
//   ПараметрКаталогEDT - Строка - Каталог расположения EDT
//
Процедура УстановитьКаталогEDT(ПараметрКаталогEDT) Экспорт
	
	Утверждения.ПроверитьРавенство(ТипЗнч(ПараметрКаталогEDT), Тип("Строка"),
		ЛокализованныеСтроки.УтверждениеКаталогEDTТип);
	
	Утверждения.ПроверитьИстину(ФС.КаталогСуществует(ПараметрКаталогEDT),
		ЛокализованныеСтроки.УтверждениеКаталогEDTСуществование);
	
	КаталогEDT = ПараметрКаталогEDT;
	
КонецПроцедуры

// Возвращает текущее значение каталога EDT
//
//  Возвращаемое значение:
//   Строка - текущее значение каталога EDT
//
Функция КаталогEDT() Экспорт
	Возврат КаталогEDT;
КонецФункции

// Осуществляет поиск каталога EDT с помощью команды ring
//
Процедура НайтиКаталогEDT() Экспорт
	
	ПеременныеСредыКоманды = Новый Соответствие;
	ПеременныеСредыКоманды.Вставить("JAVA_TOOL_OPTIONS", "-Dfile.encoding=UTF-8");
	
	Команда = Новый Команда();
	Команда.УстановитьПеременныеСреды(ПеременныеСредыКоманды);
	Команда.УстановитьКодировкуВывода(КодировкаТекста.UTF8);
	Команда.УстановитьСтрокуЗапуска("ring edt locations list 2>nul");
	КодВозврата = Команда.Исполнить();
	ВыводКоманды = Команда.ПолучитьВывод();
	
	Если КодВозврата < 0 Тогда
		ВызватьИсключение СтрШаблон(ЛокализованныеСтроки.ИсключениеОшибкаRing, ВыводКоманды);
	КонецЕсли;
	
	МассивРасположенийEDT = СтрРазделить(ВыводКоманды, Символы.ПС, Ложь);
	РасположениеEDT = Неопределено;
	МаскаПлагинов = ОбъединитьПути("plugins", "com._1c.g5.v8.dt.debug*.jar");
	Для Каждого СтрокаРасположениеEDT Из МассивРасположенийEDT Цикл
		
		ЧистаяСтрокаРасположениеEDT = СокрЛП(СтрокаРасположениеEDT);
		Если НайтиФайлы(ЧистаяСтрокаРасположениеEDT, МаскаПлагинов).Количество() > 0 Тогда
			РасположениеEDT = ЧистаяСтрокаРасположениеEDT;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьКаталогEDT(РасположениеEDT);
	
КонецПроцедуры

// Устанавливает сервер и имя предмета отладки для работы с сервером отладки
//
// Параметры:
//   ПредметОтладки - Строка - Имя предмета отладки на сервере
//   URLОтладки - Строка - Строка подключения к серверу отладки
//
Процедура УстановитьПараметрыОтладки(ПараметрПредметОтладки, ПараметрURLОтладки) Экспорт
	
	Утверждения.ПроверитьРавенство(ТипЗнч(ПараметрПредметОтладки), Тип("Строка"),
		ЛокализованныеСтроки.УтверждениеПредметОтладкиТип);
	
	Утверждения.ПроверитьРавенство(ТипЗнч(ПараметрURLОтладки), Тип("Строка"),
		ЛокализованныеСтроки.УтверждениеURLОтладкиТип);
	
	ПредметОтладки = ПараметрПредметОтладки;
	URLОтладки = ПараметрURLОтладки;
	
КонецПроцедуры

// Запускает сбор данных покрытия
//
// Параметры:
//   ИмяФайлаРезультата - Строка - Имя файла для сохранения результатов
//
//  Возвращаемое значение:
//   Число - идентификатор запущенного процесса сбора покрытия
//
Функция ЗапуститьСборПокрытия(ИмяФайлаРезультата) Экспорт
	
	Утверждения.ПроверитьРавенство(ТипЗнч(ИмяФайлаРезультата), Тип("Строка"),
		ЛокализованныеСтроки.УтверждениеПредметОтладкиТип);
	
	КаталогБиблиотеки = КаталогБиблиотеки();
	
	ПутьКлассовEDT = ОбъединитьПути(КаталогEDT, "plugins", "*");
	ПутьКлассовCoverage = ОбъединитьПути(КаталогБиблиотеки, "vendor", "Coverage41C-1.0", "lib");
	ПутьКлассовCoverage = ОбъединитьПути(ПутьКлассовCoverage, "*");
	
	ПараметрыПриложенияJava = УтилитыПриложения.НовыйПараметрыПриложенияJava();
	ПараметрыПриложенияJava.ОсновнойКласс = "com.clouds42.Coverage41C";
	ПараметрыПриложенияJava.ПутиКлассов.Добавить(ПутьКлассовEDT);
	ПараметрыПриложенияJava.ПутиКлассов.Добавить(ПутьКлассовCoverage);
	
	Команда = УтилитыПриложения.КомандаПриложениеJava(ПараметрыПриложенияJava);
	Команда.УстановитьИсполнениеЧерезКомандыСистемы(Ложь);
	Команда.ПерехватыватьПотоки(Ложь);
	Команда.ДобавитьПараметр(СтрШаблон("--infobase=""%1""", ПредметОтладки));
	Команда.ДобавитьПараметр(СтрШаблон("--debugger=""%1""", URLОтладки));
	Команда.ДобавитьПараметр(СтрШаблон("--out=""%1""", ИмяФайлаРезультата));
	
	Процесс = Команда.ЗапуститьПроцесс();

	ДождатьсяПоявленияФайла(ИмяФайлаРезультата);

	Возврат Процесс.Идентификатор;
	
КонецФункции

// Останавливает сбор покрытия и завершает процесс сбора
//
// Параметры:
//   ИдентификаторПроцесса - Число - идентификатор запущенного процесса сбора покрытия
//   ИмяФайлаРезультата - Строка - Имя файла для сохранения результатов
//
Процедура ОстановитьСборПокрытия(ИдентификаторПроцесса, ИмяФайла = "") Экспорт
	
	Утверждения.ПроверитьРавенство(ТипЗнч(ИдентификаторПроцесса), Тип("Число"),
		ЛокализованныеСтроки.УтверждениеИдентификаторПроцессаТип);

	Утверждения.ПроверитьБольше(ИдентификаторПроцесса, 0,
		ЛокализованныеСтроки.УтверждениеИдентификаторПроцессаЗначение);
	
	Процесс = НайтиПроцессПоИдентификатору(ИдентификаторПроцесса);
	
	Если Процесс = Неопределено Тогда
		ВызватьИсключение СтрШаблон(ЛокализованныеСтроки.ИсключениеПроцессНеНайден, XMLСтрока(ИдентификаторПроцесса));
	КонецЕсли;
	
	Процесс.Завершить();

	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		ДождатьсяОсвобожденияФайла(ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриСозданииОбъекта() Экспорт
	ЛокализованныеСтроки = ЛокализованныеРесурсыМенеджерПокрытияEDT.ЛокализованныеСтроки();
	ТаймаутОжидания = 30;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КаталогБиблиотеки()
	
	КаталогСценария = ТекущийСценарий().Каталог;
	ПутьККаталогу = ОбъединитьПути(КаталогСценария, "..", "..", "..");
	ФайлКаталога = Новый Файл(ПутьККаталогу);
	Возврат ФайлКаталога.ПолноеИмя;
	
КонецФункции

Функция ДождатьсяПоявленияФайла(ИмяФайла)

	ПределОжидания = ТекущаяУниверсальнаяДатаВМиллисекундах() + ТаймаутОжидания * 1000;

	Пока ТекущаяУниверсальнаяДатаВМиллисекундах() < ПределОжидания И Не ФС.ФайлСуществует(ИмяФайла) Цикл
		Приостановить(1000);
	КонецЦикла;

	Возврат ФС.ФайлСуществует(ИмяФайла);

КонецФункции

Функция ДождатьсяОсвобожденияФайла(ИмяФайла)

	ПределОжидания = ТекущаяУниверсальнаяДатаВМиллисекундах() + ТаймаутОжидания * 1000;
	
	ЧтениеТекста = Новый ЧтениеТекста;
	ФайлСвободен = Ложь;
	
	Пока ТекущаяУниверсальнаяДатаВМиллисекундах() < ПределОжидания И Не ФайлСвободен Цикл
		
		Попытка
			ЧтениеТекста.Открыть(ИмяФайла);
			ЧтениеТекста.Закрыть();	
			ФайлСвободен = Истина;	
		Исключение
			ФайлСвободен = Ложь;
		КонецПопытки;

		Приостановить(1000);
	
	КонецЦикла;
	
	Возврат ФайлСвободен;

КонецФункции

#КонецОбласти
