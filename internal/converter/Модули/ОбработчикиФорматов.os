
#Использовать "../internal/localization"
#Использовать "../../utils"

Перем Лог;
Перем ЛокализованныеСтроки;

#Область СлужебныйПрограммныйИнтерфейс

Функция ОбработчикиФормата(МодульОбработчиков) Экспорт
	
	Лог = ПараметрыПриложения.Лог();
	
	Обработчики = Новый Соответствие;
	
	ДобавитьДелегата(Обработчики, МодульОбработчиков,
		ВидыПрограммныхМодулей.МодульУправляемогоПриложения, "НайтиМодульУправляемогоПриложения");

	ДобавитьДелегата(Обработчики, МодульОбработчиков,
		ВидыПрограммныхМодулей.МодульСеанса, "НайтиМодульСеанса");
	
	ДобавитьДелегата(Обработчики, МодульОбработчиков,
		ВидыПрограммныхМодулей.МодульВнешнегоСоединения, "НайтиМодульВнешнегоСоединения");
	
	ДобавитьДелегата(Обработчики, МодульОбработчиков,
		ВидыПрограммныхМодулей.МодульОбычногоПриложения, "НайтиМодульОбычногоПриложения");

	ДобавитьДелегата(Обработчики, МодульОбработчиков,
		ВидыПрограммныхМодулей.ОбщийМодуль, "НайтиОбщийМодуль");

	ДобавитьДелегата(Обработчики, МодульОбработчиков,
		ВидыПрограммныхМодулей.МодульМенеджераЗначения, "НайтиМодульМенеджераЗначения");

	ДобавитьДелегата(Обработчики, МодульОбработчиков,
		ВидыПрограммныхМодулей.МодульМенеджераНастроек, "НайтиМодульМенеджераНастроек");
		
	ДобавитьДелегата(Обработчики, МодульОбработчиков,
		ВидыПрограммныхМодулей.МодульМенеджера, "НайтиМодульМенеджера");		
	
	ДобавитьДелегата(Обработчики, МодульОбработчиков,
		ВидыПрограммныхМодулей.МодульОбъекта, "НайтиМодульОбъекта");
	
	ДобавитьДелегата(Обработчики, МодульОбработчиков,
		ВидыПрограммныхМодулей.МодульНабораЗаписей, "НайтиМодульНабораЗаписей");			
	
	ДобавитьДелегата(Обработчики, МодульОбработчиков,
		ВидыПрограммныхМодулей.МодульФормы, "НайтиМодульФормы");			

	ДобавитьДелегата(Обработчики, МодульОбработчиков,
		ВидыПрограммныхМодулей.МодульКоманды, "НайтиМодульКоманды");			

	Возврат Обработчики;

КонецФункции

Функция ОбработчикиФорматаВнешнийМодуль(МодульОбработчиков) Экспорт

	Лог = ПараметрыПриложения.Лог();
	
	Обработчики = Новый Соответствие;
	
	ДобавитьДелегата(Обработчики, МодульОбработчиков,
		ВидыПрограммныхМодулей.МодульОбъекта, "НайтиВнешнийМодульОбъекта");

	ДобавитьДелегата(Обработчики, МодульОбработчиков,
	 	ВидыПрограммныхМодулей.МодульФормы, "НайтиВнешнийМодульФормы");
	
	Возврат Обработчики;

КонецФункции

#Область ОбработчикиОшибок

Процедура НеНайденМодульУправляемогоПриложения(ИдентификаторПрограммногоМодуля) Экспорт

	ТекстСообщения = СтрШаблон(
		ЛокализованныеСтроки.НеНайденМодульУправляемогоПриложения, 
		ИдентификаторПрограммногоМодуля);
	Лог.Ошибка(ТекстСообщения);

КонецПроцедуры 

Процедура НеНайденМодульСеанса(ИдентификаторПрограммногоМодуля) Экспорт

	ТекстСообщения = СтрШаблон(
		ЛокализованныеСтроки.НеНайденМодульСеанса, 
		ИдентификаторПрограммногоМодуля);
	Лог.Ошибка(ТекстСообщения);

КонецПроцедуры

Процедура НеНайденМодульВнешнегоСоединения(ИдентификаторПрограммногоМодуля) Экспорт

	ТекстСообщения = СтрШаблон(
		ЛокализованныеСтроки.НеНайденМодульВнешнегоСоединения, 
		ИдентификаторПрограммногоМодуля);
	Лог.Ошибка(ТекстСообщения);

КонецПроцедуры

Процедура НеНайденМодульОбычногоПриложения(ИдентификаторПрограммногоМодуля) Экспорт

	ТекстСообщения = СтрШаблон(
		ЛокализованныеСтроки.НеНайденМодульОбычногоПриложения, 
		ИдентификаторПрограммногоМодуля);
	Лог.Ошибка(ТекстСообщения);

КонецПроцедуры

Процедура НеНайденОбщийМодуль(ИдентификаторПрограммногоМодуля) Экспорт
	
	ТекстСообщения = СтрШаблон(
		ЛокализованныеСтроки.НеНайденОбщийМодуль, 
		ИдентификаторПрограммногоМодуля);
	Лог.Ошибка(ТекстСообщения);

КонецПроцедуры

Процедура НеНайденМодульМенеджераЗначения(ИдентификаторПрограммногоМодуля) Экспорт
	
	ТекстСообщения = СтрШаблон(
		ЛокализованныеСтроки.НеНайденМодульМенеджераЗначения, 
		ИдентификаторПрограммногоМодуля);
	Лог.Ошибка(ТекстСообщения);

КонецПроцедуры

Процедура НеНайденМодульМенеджераНастроек(ИдентификаторПрограммногоМодуля) Экспорт
	
	ТекстСообщения = СтрШаблон(
		ЛокализованныеСтроки.НеНайденМодульМенеджераНастроек, 
		ИдентификаторПрограммногоМодуля);
	Лог.Ошибка(ТекстСообщения);

КонецПроцедуры

Процедура НеНайденМодульМенеджера(ИдентификаторПрограммногоМодуля) Экспорт
	
	ТекстСообщения = СтрШаблон(
		ЛокализованныеСтроки.НеНайденМодульМенеджера, 
		ИдентификаторПрограммногоМодуля);
	Лог.Ошибка(ТекстСообщения);

КонецПроцедуры

Процедура НеНайденМодульОбъекта(ИдентификаторПрограммногоМодуля) Экспорт
	
	ТекстСообщения = СтрШаблон(
		ЛокализованныеСтроки.НеНайденМодульОбъекта, 
		ИдентификаторПрограммногоМодуля);
	Лог.Ошибка(ТекстСообщения);

КонецПроцедуры

Процедура НеНайденМодульНабораЗаписей(ИдентификаторПрограммногоМодуля) Экспорт
	
	ТекстСообщения = СтрШаблон(
		ЛокализованныеСтроки.НеНайденМодульНабораЗаписей, 
		ИдентификаторПрограммногоМодуля);
	Лог.Ошибка(ТекстСообщения);

КонецПроцедуры

Процедура НеНайденМодульФормы(ИдентификаторПрограммногоМодуля) Экспорт
	
	ТекстСообщения = СтрШаблон(
		ЛокализованныеСтроки.НеНайденМодульФормы, 
		ИдентификаторПрограммногоМодуля);
	Лог.Ошибка(ТекстСообщения);

КонецПроцедуры

Процедура НеНайденМодульКоманды(ИдентификаторПрограммногоМодуля) Экспорт
	
	ТекстСообщения = СтрШаблон(
		ЛокализованныеСтроки.НеНайденМодульКоманды, 
		ИдентификаторПрограммногоМодуля);
	Лог.Ошибка(ТекстСообщения);

КонецПроцедуры

#КонецОбласти

#Область СпискиКаталогов

Функция СписокКаталоговОбщийМодуль() Экспорт

	СписокКаталогов = Новый Массив;
	СписокКаталогов.Добавить("CommonModules");
	СписокКаталогов.Добавить("HTTPServices");
	СписокКаталогов.Добавить("WebServices");

	Возврат СписокКаталогов;

КонецФункции

Функция СписокКаталоговМодульМенеджера() Экспорт
	
	СписокКаталогов = Новый Массив;
	СписокКаталогов.Добавить("ExchangePlans");
	СписокКаталогов.Добавить("FilterCriteria");
	СписокКаталогов.Добавить("SettingsStorages");
	СписокКаталогов.Добавить("Catalogs");
	СписокКаталогов.Добавить("Documents");
	СписокКаталогов.Добавить("Enums");
	СписокКаталогов.Добавить("Reports");
	СписокКаталогов.Добавить("DataProcessors");
	СписокКаталогов.Добавить("DocumentJournals");
	СписокКаталогов.Добавить("ChartsOfCharacteristicTypes");
	СписокКаталогов.Добавить("ChartsOfAccounts");
	СписокКаталогов.Добавить("ChartsOfCalculationTypes");
	СписокКаталогов.Добавить("InformationRegisters");
	СписокКаталогов.Добавить("AccumulationRegisters");
	СписокКаталогов.Добавить("AccountingRegisters");
	СписокКаталогов.Добавить("CalculationRegisters");
	СписокКаталогов.Добавить("BusinessProcesses");
	СписокКаталогов.Добавить("Tasks");

	Возврат СписокКаталогов;

КонецФункции

Функция СписокКаталоговМодульОбъекта() Экспорт
	
	СписокКаталогов = Новый Массив;
	СписокКаталогов.Добавить("ExchangePlans");
	СписокКаталогов.Добавить("Catalogs");
	СписокКаталогов.Добавить("Documents");
	СписокКаталогов.Добавить("Reports");
	СписокКаталогов.Добавить("DataProcessors");
	СписокКаталогов.Добавить("ChartsOfCharacteristicTypes");
	СписокКаталогов.Добавить("ChartsOfAccounts");
	СписокКаталогов.Добавить("ChartsOfCalculationTypes");
	СписокКаталогов.Добавить("BusinessProcesses");
	СписокКаталогов.Добавить("Tasks");

	Возврат СписокКаталогов;

КонецФункции

Функция СписокКаталоговМодульНабораЗаписей() Экспорт

	СписокКаталогов = Новый Массив;
	СписокКаталогов.Добавить("Sequences");
	СписокКаталогов.Добавить("InformationRegisters");
	СписокКаталогов.Добавить("AccumulationRegisters");
	СписокКаталогов.Добавить("AccountingRegisters");
	СписокКаталогов.Добавить("CalculationRegisters");

	Возврат СписокКаталогов;

КонецФункции

Функция СписокКаталоговМодульФормы() Экспорт
	
	СписокКаталогов = Новый Массив;
	СписокКаталогов.Добавить("ExchangePlans");
	СписокКаталогов.Добавить("FilterCriteria");
	СписокКаталогов.Добавить("SettingsStorages");
	СписокКаталогов.Добавить("Catalogs");
	СписокКаталогов.Добавить("Documents");
	СписокКаталогов.Добавить("DocumentJournals");
	СписокКаталогов.Добавить("Enums");
	СписокКаталогов.Добавить("Reports");
	СписокКаталогов.Добавить("DataProcessors");
	СписокКаталогов.Добавить("ChartsOfCharacteristicTypes");
	СписокКаталогов.Добавить("ChartsOfAccounts");
	СписокКаталогов.Добавить("ChartsOfCalculationTypes");
	СписокКаталогов.Добавить("InformationRegisters");
	СписокКаталогов.Добавить("AccumulationRegisters");
	СписокКаталогов.Добавить("AccountingRegisters");
	СписокКаталогов.Добавить("CalculationRegisters");
	СписокКаталогов.Добавить("BusinessProcesses");
	СписокКаталогов.Добавить("Tasks");

	Возврат СписокКаталогов;

КонецФункции

Функция СписокКаталоговМодульКоманды() Экспорт

	СписокКаталогов = Новый Массив;
	СписокКаталогов.Добавить("ExchangePlans");
	СписокКаталогов.Добавить("FilterCriteria");
	СписокКаталогов.Добавить("Catalogs");
	СписокКаталогов.Добавить("Documents");
	СписокКаталогов.Добавить("DocumentJournals");
	СписокКаталогов.Добавить("Enums");
	СписокКаталогов.Добавить("Reports");
	СписокКаталогов.Добавить("DataProcessors");
	СписокКаталогов.Добавить("ChartsOfCharacteristicTypes");
	СписокКаталогов.Добавить("ChartsOfAccounts");
	СписокКаталогов.Добавить("ChartsOfCalculationTypes");
	СписокКаталогов.Добавить("InformationRegisters");
	СписокКаталогов.Добавить("AccumulationRegisters");
	СписокКаталогов.Добавить("AccountingRegisters");
	СписокКаталогов.Добавить("CalculationRegisters");
	СписокКаталогов.Добавить("BusinessProcesses");
	СписокКаталогов.Добавить("Tasks");
	Возврат СписокКаталогов;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьДелегата(Обработчики, МодульОбработчиков, ВидПрограммногоМодуля, ИмяДелегата)

	Делегат = Новый Действие(МодульОбработчиков, ИмяДелегата);
	Обработчики.Вставить(ВидПрограммногоМодуля, Делегат);

КонецПроцедуры

#КонецОбласти

ЛокализованныеСтроки = ЛокализованныеРесурсыОбработчикиФорматов.ЛокализованныеСтроки();
