
#Использовать "../../internal/utils"

#Область ОбработчикиСобытий

Процедура ПередСборкой(Знач РабочийКаталог) Экспорт

    КаталогСценария = ТекущийСценарий().Каталог;
    КаталогПроекта = ОбъединитьПути(КаталогСценария, "..", "..");
    Файл = Новый Файл(КаталогПроекта);
    КаталогПроекта = Файл.ПолноеИмя;
 
    КаталогВнешнихПоставщиков = ОбъединитьПути(КаталогПроекта, "vendor");
    
    СкачатьПоставляемыйCoverage41C(КаталогВнешнихПоставщиков);
    СкачатьПоставляемыйBSLLS(КаталогВнешнихПоставщиков);
   
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СкачатьПоставляемыйCoverage41C(КаталогВнешнихПоставщиков)
    
    Файл = Новый Файл(ОбъединитьПути(КаталогВнешнихПоставщиков, "Coverage41C-1.1"));
    Если Файл.Существует() Тогда
        Возврат;
    КонецЕсли;

    ИмяРепозитория = "proDOOMman/Coverage41C";
    НомерРелиза    = "v1.0";
    ИмяРесурса     = "Coverage41C-1.0.zip";

    ВременныйФайл = ПолучитьИмяВременногоФайла("zip");

    СкачатьРесурсРелизаGitHub(ИмяРепозитория, НомерРелиза, ИмяРесурса, ВременныйФайл);

    ЧтениеZip = Новый ЧтениеZipФайла(ВременныйФайл);
    ЧтениеZip.ИзвлечьВсе(КаталогВнешнихПоставщиков);
    ЧтениеZip.Закрыть();

    УдалитьФайлы(ВременныйФайл);

КонецПроцедуры

Процедура СкачатьПоставляемыйBSLLS(КаталогВнешнихПоставщиков)

    Файл = Новый Файл(ОбъединитьПути(КаталогВнешнихПоставщиков, "bsl-language-server"));
    Если Файл.Существует() Тогда
        Возврат;
    КонецЕсли;   

    ИмяРепозитория = "1c-syntax/bsl-language-server";
    НомерРелиза    = "v0.15.0-RA1";
    ИмяРесурса     = "bsl-language-server-0.15.0-RA1.jar";
    КаталогBSLLS   = Файл.ПолноеИмя;

    СоздатьКаталог(КаталогBSLLS);
    ВременныйФайл = ПолучитьИмяВременногоФайла("jar");

    СкачатьРесурсРелизаGitHub(ИмяРепозитория, НомерРелиза, ИмяРесурса, ВременныйФайл);

    ПереместитьФайл(ВременныйФайл, ОбъединитьПути(КаталогBSLLS, ИмяРесурса));
    УдалитьФайлы(ВременныйФайл);

КонецПроцедуры

Процедура СкачатьРесурсРелизаGitHub(ИмяРепозитория, НомерРелиза, ИмяРесурса, ИмяФайла)
    
    АдресРесурса = СтрШаблон("%1/releases/download/%2/%3", ИмяРепозитория, НомерРелиза, ИмяРесурса);
    HTTPСоединение = Новый HTTPСоединение("https://github.com", , , , , 300);
    HTTPЗапрос = Новый HTTPЗапрос(АдресРесурса);
    HTTPСоединение.Получить(HTTPЗапрос, ИмяФайла);

КонецПроцедуры

#КонецОбласти

Описание.Имя("coverage-cli")
		.Версия(ПараметрыПриложения.ВерсияПриложения())
        .Описание("Консольное приложение для работы с покрытием")
        .ВерсияСреды("1.3.0")
		.ЗависитОт("cli")
        .ЗависитОт("logos")
        .ЗависитОт("1commands")
        .ЗависитОт("configor")
        .ЗависитОт("fs")
        .ЗависитОт("asserts")
        .ЗависитОт("yabr", "0.6.1")
        .ВключитьФайл("cmd")
        .ВключитьФайл("configs")
        .ВключитьФайл("examples")
        .ВключитьФайл("pkg")
        .ВключитьФайл("internal")
        .ВключитьФайл("vendor")
        .ВключитьФайл("README.md")
        .ОпределяетМодуль("СтартерBSLLS", "pkg/bsllslauncher/Модули/СтартерBSLLS.os")
        .ОпределяетКласс("Конвертер", "pkg/converter/Классы/Конвертер.os")
        .ОпределяетМодуль("ФорматыИсходныхФайлов", "pkg/converter/Модули/ФорматыИсходныхФайлов.os")
        .ОпределяетКласс("ПокрытиеGenericCoverage", "pkg/genericCoverage/Классы/ПокрытиеGenericCoverage.os")
        .ОпределяетКласс("МенеджерПокрытияEDT", "pkg/edtcoverage/Классы/МенеджерПокрытияEDT.os")
        .ИсполняемыйФайл("cmd/main.os")
;